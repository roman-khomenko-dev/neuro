"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _util = require("./util");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Draw = /*#__PURE__*/function () {
  _createClass(Draw, null, [{
    key: "getPixelArray",

    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     */
    value: function getPixelArray(ctx) {
      var _ctx$canvas = ctx.canvas,
          height = _ctx$canvas.height,
          width = _ctx$canvas.width;
      var imageData = ctx.getImageData(0, 0, width, height);
      var pixels = imageData.data;
      return pixels;
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     */

  }, {
    key: "getGreyScalePixelArray",
    value: function getGreyScalePixelArray(ctx) {
      var pixels = Draw.getPixelArray(ctx);
      var greyScalePixels = pixels.filter(function (_, i) {
        return (i + 1) % 4 === 0;
      });
      return greyScalePixels;
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     */

  }, {
    key: "getPixelMatrix",
    value: function getPixelMatrix(ctx) {
      var width = ctx.canvas.width;
      var pixelArray = Draw.getGreyScalePixelArray(ctx);
      var pixelMatrix = (0, _util.chunkArray)(pixelArray, width);
      return pixelMatrix;
    }
    /**
     *
     * @param {HTMLElement} element
     * @param {number} width
     * @param {number} height
     * @param {object} opts
     */

  }]);

  function Draw(element, width, height) {
    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref$style = _ref.style,
        style = _ref$style === void 0 ? {
      touchAction: 'none'
    } : _ref$style,
        _ref$backgroundColor = _ref.backgroundColor,
        backgroundColor = _ref$backgroundColor === void 0 ? 'cyan' : _ref$backgroundColor,
        _ref$strokeColor = _ref.strokeColor,
        strokeColor = _ref$strokeColor === void 0 ? 'black' : _ref$strokeColor,
        _ref$strokeWeight = _ref.strokeWeight,
        strokeWeight = _ref$strokeWeight === void 0 ? 15 : _ref$strokeWeight;

    _classCallCheck(this, Draw);

    this.canvas = document.createElement('canvas');
    this.canvas.width = width;
    this.canvas.height = height;
    this.canvas.style.backgroundColor = backgroundColor;
    this.setCanvasStyle(style);
    element.appendChild(this.canvas);
    this.ctx = this.canvas.getContext('2d');
    this.strokeColor = strokeColor;
    this.strokeWeight = strokeWeight;
    this.drawing = [{
      color: strokeColor,
      strokeWeight: strokeWeight,
      points: []
    }];
    this.height = height;
    this.width = width;
    this.setupEventListeners();
  }
  /**
   *
   * @param {string | CanvasGradient | CanvasPattern} strokeColor
   */


  _createClass(Draw, [{
    key: "changeStrokeColor",
    value: function changeStrokeColor(strokeColor) {
      this.strokeColor = strokeColor;
    }
    /**
     *
     * @param {string} backgroundColor
     */

  }, {
    key: "changeBackgroundColor",
    value: function changeBackgroundColor(backgroundColor) {
      this.canvas.style.backgroundColor = backgroundColor;
    }
    /**
     *
     * @param {number} strokeWeight
     */

  }, {
    key: "changeStrokeWeight",
    value: function changeStrokeWeight(strokeWeight) {
      this.strokeWeight = strokeWeight;
    }
    /**
     *
     * @param {object} style
     */

  }, {
    key: "setCanvasStyle",
    value: function setCanvasStyle(style) {
      var _this = this;

      Object.entries(style).forEach(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
            key = _ref3[0],
            value = _ref3[1];

        _this.canvas.style[key] = value;
      });
    }
  }, {
    key: "getDrawing",
    value: function getDrawing() {
      return this.drawing;
    }
    /**
     *
     * @param {string} filename
     */

  }, {
    key: "downloadPNG",
    value: function downloadPNG() {
      var filename = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'canvas.png';
      var dataURL = this.canvas.toDataURL('image/png');
      (0, _util.downloadURI)(dataURL, filename);
    }
  }, {
    key: "setupEventListeners",
    value: function setupEventListeners() {
      this.canvas.addEventListener('pointermove', this.onPointerMove.bind(this));
      window.addEventListener('pointerdown', this.onPointerDown.bind(this));
      window.addEventListener('pointerup', this.onPointerUp.bind(this));
    }
    /**
     *
     * @param {PointerEvent} event
     */

  }, {
    key: "onPointerMove",
    value: function onPointerMove(event) {
      var x = event.offsetX;
      var y = event.offsetY;

      if (this.pointerIsDown) {
        this.drawing[this.drawing.length - 1].points.push({
          x: x,
          y: y
        });
        this.draw();
      }
    }
  }, {
    key: "onPointerDown",
    value: function onPointerDown() {
      this.pointerIsDown = true;
      this.drawing[this.drawing.length - 1].strokeWeight = this.strokeWeight;
      this.drawing[this.drawing.length - 1].color = this.strokeColor;
    }
  }, {
    key: "onPointerUp",
    value: function onPointerUp() {
      if (this.drawing[this.drawing.length - 1].points.length > 0) {
        this.drawing.push({
          color: this.strokeColor,
          strokeWeight: this.strokeWeight,
          points: []
        });
      }

      this.pointerIsDown = false;
    }
  }, {
    key: "getPixelArray",
    value: function getPixelArray() {
      var imageData = this.ctx.getImageData(0, 0, this.width, this.height);
      var pixels = imageData.data;
      return pixels;
    }
  }, {
    key: "getGreyScalePixelArray",
    value: function getGreyScalePixelArray() {
      var pixels = this.getPixelArray();
      var greyScalePixels = pixels.filter(function (_, i) {
        return (i + 1) % 4 === 0;
      });
      return greyScalePixels;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.drawing = [{
        color: this.strokeColor,
        strokeWeight: this.strokeWeight,
        points: []
      }];
      this.clearCanvas();
    }
  }, {
    key: "clearCanvas",
    value: function clearCanvas() {
      this.ctx.clearRect(0, 0, this.width, this.height);
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this2 = this;

      this.clearCanvas();
      this.drawing.forEach(function (stroke) {
        _this2.drawStroke(stroke);
      });
    }
  }, {
    key: "drawLinePoint",
    value: function drawLinePoint(point, strokeWeight) {
      this.ctx.beginPath();
      this.ctx.arc(point.x, point.y, strokeWeight / 2, 0, Math.PI * 2, true);
      this.ctx.closePath();
      this.ctx.fill();
    }
  }, {
    key: "drawStroke",
    value: function drawStroke(stroke) {
      var points = stroke.points,
          color = stroke.color,
          strokeWeight = stroke.strokeWeight;
      this.ctx.strokeStyle = color;
      this.ctx.fillStyle = color;
      this.ctx.lineWidth = strokeWeight;

      if (points.length === 0) {
        return;
      } // draw a basic circle instead


      if (points.length < 6) {
        this.drawLinePoint(points[0]);
        return;
      }

      this.ctx.beginPath();
      this.ctx.moveTo(points[0].x, points[0].y); // draw a bunch of quadratics, using the average of two points as the control point

      var i;

      for (i = 1; i < points.length - 2; i += 1) {
        var c = (points[i].x + points[i + 1].x) / 2;
        var d = (points[i].y + points[i + 1].y) / 2;
        this.ctx.quadraticCurveTo(points[i].x, points[i].y, c, d);
      }

      this.ctx.quadraticCurveTo(points[i].x, points[i].y, points[i + 1].x, points[i + 1].y);
      this.ctx.stroke();
      this.drawLinePoint(points[points.length - 1], strokeWeight);
    }
  }]);

  return Draw;
}();

exports["default"] = Draw;